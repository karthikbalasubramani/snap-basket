// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreateUserModelService_CreateUser_FullMethodName = "/CreateUserModelService/CreateUser"
)

// CreateUserModelServiceClient is the client API for CreateUserModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Create User Service, Request and Response
type CreateUserModelServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type createUserModelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateUserModelServiceClient(cc grpc.ClientConnInterface) CreateUserModelServiceClient {
	return &createUserModelServiceClient{cc}
}

func (c *createUserModelServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, CreateUserModelService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateUserModelServiceServer is the server API for CreateUserModelService service.
// All implementations must embed UnimplementedCreateUserModelServiceServer
// for forward compatibility.
//
// Create User Service, Request and Response
type CreateUserModelServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	mustEmbedUnimplementedCreateUserModelServiceServer()
}

// UnimplementedCreateUserModelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreateUserModelServiceServer struct{}

func (UnimplementedCreateUserModelServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCreateUserModelServiceServer) mustEmbedUnimplementedCreateUserModelServiceServer() {
}
func (UnimplementedCreateUserModelServiceServer) testEmbeddedByValue() {}

// UnsafeCreateUserModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateUserModelServiceServer will
// result in compilation errors.
type UnsafeCreateUserModelServiceServer interface {
	mustEmbedUnimplementedCreateUserModelServiceServer()
}

func RegisterCreateUserModelServiceServer(s grpc.ServiceRegistrar, srv CreateUserModelServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreateUserModelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreateUserModelService_ServiceDesc, srv)
}

func _CreateUserModelService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateUserModelServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateUserModelService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateUserModelServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateUserModelService_ServiceDesc is the grpc.ServiceDesc for CreateUserModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateUserModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CreateUserModelService",
	HandlerType: (*CreateUserModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _CreateUserModelService_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

const (
	LoginUserService_LoginUser_FullMethodName = "/LoginUserService/LoginUser"
)

// LoginUserServiceClient is the client API for LoginUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Login User Service, Request and Response
type LoginUserServiceClient interface {
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
}

type loginUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginUserServiceClient(cc grpc.ClientConnInterface) LoginUserServiceClient {
	return &loginUserServiceClient{cc}
}

func (c *loginUserServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, LoginUserService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginUserServiceServer is the server API for LoginUserService service.
// All implementations must embed UnimplementedLoginUserServiceServer
// for forward compatibility.
//
// Login User Service, Request and Response
type LoginUserServiceServer interface {
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	mustEmbedUnimplementedLoginUserServiceServer()
}

// UnimplementedLoginUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoginUserServiceServer struct{}

func (UnimplementedLoginUserServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedLoginUserServiceServer) mustEmbedUnimplementedLoginUserServiceServer() {}
func (UnimplementedLoginUserServiceServer) testEmbeddedByValue()                          {}

// UnsafeLoginUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginUserServiceServer will
// result in compilation errors.
type UnsafeLoginUserServiceServer interface {
	mustEmbedUnimplementedLoginUserServiceServer()
}

func RegisterLoginUserServiceServer(s grpc.ServiceRegistrar, srv LoginUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoginUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoginUserService_ServiceDesc, srv)
}

func _LoginUserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginUserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginUserService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginUserServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginUserService_ServiceDesc is the grpc.ServiceDesc for LoginUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LoginUserService",
	HandlerType: (*LoginUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUser",
			Handler:    _LoginUserService_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
